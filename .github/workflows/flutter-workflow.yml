# This is a basic workflow to help you get started with Actions

name: Flutter CI

# Controls when the workflow will run
on:

  # Triggers the workflow on pull for the "main" branch
  pull_request:
    branches:
      - master
      - development
      - dev_bhargav
      - dev_kamlesh
      - dev_ios

  # Triggers the workflow on push for the "main" branch
  push:
    branches:
      - master
      - development
      - dev_bhargav
      - dev_kamlesh
      - dev_ios

    # Allows you to run this workflow manually from the Actions tab
    workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  # This workflow contains a single job called "build"
    build-android:

      # The type of runner that the job will run on
      runs-on: ubuntu-latest

      # Steps represent a sequence of tasks that will be executed as part of the job
      steps:
        - name: Debug Info
          run: |
            echo "Branch: ${{ github.ref }}"
            echo "Event Name: ${{ github.event_name }}"
            echo "GitHub Event: ${{ toJson(github.event) }}"

        # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
        - name: Checkout
          uses: actions/checkout@v4

        # Set Up Java JDK
        - name: Set up JAVA JDK
          uses: actions/setup-java@v3
          with:
            distribution: 'temurin'
            java-version: '18'
            cache: 'gradle'

        # Flutter environment for use in GitHub Actions
        - uses: subosito/flutter-action@v2
          with:
            flutter-version: '3.16.5'
            channel: 'stable'
            cache: true

        # Get dependencies of flutter
        - run: flutter pub get
        - run: flutter analyze .

        # Only build if the branch is 'master'
        - if: github.ref == 'refs/heads/master'
          run: flutter build apk --no-tree-shake-icons

        # Only upload the build if the branch is 'master'
        - if: github.ref == 'refs/heads/master'
          name: Upload the build
          uses: actions/upload-artifact@v4
          with:
            name: build
            path: build/app/outputs/apk/release/app-release.apk

        # Slack Integration STEP1 : Upload build to Slack
        # Only execute these steps if the branch is 'master'
        - if: github.ref == 'refs/heads/master'
          name: Upload build to slack
          uses: MeilCli/slack-upload-file@v3
          with:
            slack_token: ${{secrets.SLACK_BOT_TOKEN}}
            channel_id: ${{ secrets.SLACK_CHANNEL_ID }}
            file_path: build/app/outputs/apk/release/app-release.apk
            initial_comment: 'New release app available. Please install it.'

        # Slack Integration STEP2  : Sending notification on slack channel
        - name: Slack Notification
          uses: rtCamp/action-slack-notify@v2
          with:
            status: ${{ job.status }}
            text: "Build ${{ job.status }} for commit ${{ github.sha }} in branch ${{ github.ref }}."

          env:
            SLACK_CHANNEL: flutter-cicd
            SLACK_TITLE: Post title
            SLACK_USERNAME: nrup.parikh
            SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
            SLACK_MESSAGE: "${{ github.event.workflow_run.head_commit.message }}"

    build-ios:
      runs-on: macos-latest

      steps:

        - name: check Xcode version
          run: /usr/bin/xcodebuild -version

        - name: Checkout repository
          uses: actions/checkout@v4

        - name: Install the Apple certificate and provisioning profile
          env:
            BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
            P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
            BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
            KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          run: |
            # create variables
            CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
            PP_PATH=$RUNNER_TEMP/Wildcard_Dev.mobileprovision
            KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

            # import certificate and provisioning profile from secrets
            echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
            echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

            # create temporary keychain
            security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
            security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
            security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

            # import certificate to keychain
            security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
            security list-keychain -d user -s $KEYCHAIN_PATH

            # apply provisioning profile
            mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
            cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

        - name: build archive
          run: |
            xcodebuild -scheme "Flutter Base Structure" \
            -archivePath $RUNNER_TEMP/flutter_base_structure.xcarchive \
            -sdk iphoneos \
            -configuration Debug \
            -destination generic/platform=iOS \
            clean archive

        - name: export ipa
          env:
              EXPORT_OPTIONS_PLIST: ${{ secrets.EXPORT_OPTIONS_PLIST }}
          run: |
              EXPORT_OPTS_PATH=$RUNNER_TEMP/ExportOptions.plist
              echo -n "$EXPORT_OPTIONS_PLIST" | base64 --decode -o $EXPORT_OPTS_PATH
              xcodebuild -exportArchive -archivePath $RUNNER_TEMP/flutter_base_structure.xcarchive -exportOptionsPlist $EXPORT_OPTS_PATH -exportPath $RUNNER_TEMP/build

        - name: Upload application
          uses: actions/upload-artifact@v4
          with:
            name: app
            path: ${{ runner.temp }}/build/flutter_base_structure.ipa
            # you can also archive the entire directory
            # path: ${{ runner.temp }}/build
            retention-days: 3